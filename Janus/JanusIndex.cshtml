
@{
    Layout = null;
}

<!DOCTYPE html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>@(ViewBag.Title + "的视频会议")</title>
    <!-- 引入样式 -->
    <link rel="stylesheet" href="~/Content/VideoMeeting/css/Element-UI/index.css">
    <link rel="stylesheet" type="text/css" href="~/Content/VideoMeeting/css/iconfont.css">
    <link rel="stylesheet" type="text/css" href="~/Content/VideoMeeting/css/style.css">
    <link rel="stylesheet" type="text/css" href="~/Content/VideoMeeting/Janus/css/janus.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/VideoMeeting/Janus/css/toastify.min.css">
    <link rel="stylesheet" type="text/css" href="~/Content/VideoMeeting/Janus/css/style.css">
</head>
<div id="app" v-bind:class="screenModel?'main-tab':''">
    <el-container>
        <!-- 顶部 -->
        <el-header class="vh-top clearfix">
            <h1 class="float-l">@(ViewBag.Title + "的视频会议")</h1>
            <div class="float-r">
                <span v-show="isLive==1">
                    <el-popover placement="left" width="320" v-model="visibleQRCode">
                        <p>请扫描下方二维码，进入视频会议</p>
                        <div style="width: 320px;height: 320px;" id="QRCode">

                        </div>
                        <el-tooltip slot="reference" content="分享二维码" placement="top">
                            <i class="bg-icon iconfont icon-shareP"></i>
                        </el-tooltip>
                    </el-popover>
                </span>
                <span>
                    <el-tooltip content="分享摄像头" placement="top">
                        <i class="bg-icon iconfont icon-sxt" v-show="hasCamera"
                           v-on:click="ChangeVideoSource('camera')"></i>
                    </el-tooltip>
                </span>
                <span>
                    <el-tooltip content="共享屏幕" placement="top">
                        <i class="bg-icon iconfont icon-pm" v-bind:class="" v-on:click="ChangeVideoSource('desktop')"></i>
                    </el-tooltip>
                </span>
                <span>
                    <el-tooltip content="设置" placement="top">
                        <i class="bg-icon iconfont icon-set" v-on:click="ShowSettingDialog"></i>
                    </el-tooltip>
                </span>
                <span>
                    <el-tooltip v-bind:content="resharpMessage" placement="top">
                        <i class="bg-icon iconfont" v-bind:class="isFocused?'icon-wg':'icon-zcr'"
                           v-on:click="resharpElement()"></i>
                    </el-tooltip>
                </span>
                <span>
                    <el-tooltip content="协同研讨" placement="top">
                        <i class="bg-icon iconfont icon-discuss" v-on:click="OpenOrCreateDiscuss()"></i>
                    </el-tooltip>
                </span>
                <span>
                    <el-tooltip v-bind:content="screenModel?'电脑模式':'大屏模式'" placement="top">
                        <i class="bg-icon iconfont" v-bind:class="screenModel?'icon-dpc':'icon-pc'"
                           v-on:click="screenModel=!screenModel"></i>
                    </el-tooltip>
                </span>
                <span>
                    <el-tooltip content="全屏" placement="top">
                        <i class="bg-icon iconfont"
                           v-bind:class="{ 'icon-fullScreen': !isFullScreen,'icon-exitFullSrceen': isFullScreen }"
                           v-on:click="FullScreen"></i>
                    </el-tooltip>
                </span>
            </div>
        </el-header>
        <!-- 主体内容 -->
        <el-main class="v-main" id="appMain">
            <!-- 右侧-讨论区 -->
            <div class="video-r" v-bind:class="{ r0: showRight }">
                <!-- 点击此按钮可以收起右侧 点击时给div加类名r0-->
                <span class="iconfont icon-rightJ" v-on:click="showRight=!showRight"></span>
                <el-tabs v-model="rightActiveName">
                    <el-tab-pane label="讨论区" name="first">
                        <!-- 讨论区内容 -->
                        <el-scrollbar class="vr-con clearfix" ref="talkPanel">
                            <infinite-loading direction="top" @@infinite="infiniteHandler" spinner="spiral">
                                <div slot="no-more"></div>
                                <div slot="no-results"></div>
                            </infinite-loading>
                            <div class="vrc-item" v-for="(item, index) in conferenceMsgs">
                                <p class="clearfix lihe30">
                                    <span class="float-l">
                                        <img v-bind:src="item.Photo" class="head-simg mr10" v-cloak />
                                        <span class="mem-width color-9" v-cloak>{{item.TrueName}}</span>
                                    </span>
                                    <span class="float-r color-9 mr10" v-cloak>{{item.CreateDate}}</span>
                                </p>
                                <p class="vrci-txt" v-cloak v-html="item.Contents">

                                </p>
                            </div>

                        </el-scrollbar>
                        <div class="vr-bot">
                            <el-input type="textarea" v-model.trim="msgContent" v-on:keyup.enter.native="SendMessage()">
                            </el-input>
                            <button type="submit" slot="reference" class="btn-blue"
                                    v-on:click.prevent="SendMessage()">
                                发表意见
                            </button>
                        </div>
                    </el-tab-pane>
                </el-tabs>
            </div>
            <!-- 左侧-会议成员与会议观众 -->
            <div class="video-l" v-bind:class="{ l0: showLeft }">
                <!-- 点击此按钮可以收起右侧 点击时给div加类名l0-->
                <span class="iconfont icon-rightJian" v-on:click="showLeft=!showLeft"></span>
                <el-tabs v-model="leftActiveName">
                    <el-tab-pane name="first">
                        <span slot="label">会议成员({{onlineCount}}/{{totalCount}})</span>
                        <el-scrollbar class="vl-con clearfix">
                            <ul class="member-ul ">
                                <li v-for="(item, index) in members" v-bind:data-uid="item.userId" v-bind:data-title="item.realName"
                                    class="member-li">
                                    <el-popover placement="right"
                                                title=""
                                                trigger="click">
                                        <el-image slot="reference" v-bind:src="item.logo"></el-image>
                                        <el-image v-bind:src="item.logo" style="width: 320px;height: 320px;"></el-image>
                                    </el-popover>
                                    @*<img v-bind:src="item.logo" class="head-img mr10 dynamic-head-img" v-cloak>*@
                                    <div class="vc-r">
                              <p class="vc-p">
                                 <span>
                                    <el-tooltip v-bind:content="item.realName" placement="top">

                                       <span class="p1 mem-width" v-bind:title="item.realName"
                                          v-cloak>{{item.realName}}</span>
                                    </el-tooltip>
                                 </span>
                                 <span v-if="item.isAdmin">
                                    <el-tooltip content="主持人" placement="top">
                                       <i class="iconfont icon-zcr mr10"></i>
                                    </el-tooltip>
                                 </span>
                                 <span>
                                    <el-tooltip content="正在发言" placement="top">
                                       <i class="iconfont icon-sxt hide"></i>
                                    </el-tooltip>
                                 </span>

                              </p>
                              <p class="vc-p">
                                 <span v-if="isAdmin">
                                    <el-tooltip content="挂断" placement="top">
                                       <i class="iconfont icon-gd hide" v-on:click="StopSpeech(item.userId)"></i>
                                    </el-tooltip>
                                 </span>
                                 <span v-if="isAdmin">
                                    <el-tooltip content="同意" placement="top">
                                       <i class="iconfont icon-yes mr10 hide" v-on:click="AgreeSpeech(item.userId)"></i>
                                    </el-tooltip>
                                 </span>
                                 <span v-if="isAdmin">
                                    <el-tooltip content="拒绝" placement="top">
                                       <i class="iconfont icon-no hide" v-on:click="DisAgreeSpeech(item.userId)"></i>
                                    </el-tooltip>
                                 </span>
                              </p>
                           </div>
                                    <span class="tab-status"></span>
                            </ul>
                        </el-scrollbar>
                    </el-tab-pane>
                    <el-tab-pane label="会议观众" name="second" v-if="isLive==1">
                        <span slot="label">会议观众({{onlineCount_Audience}}/{{audienceMember.length}})</span>
                        <el-scrollbar class="vl-con clearfix">
                            <ul class="audience-ul">
                                <li v-for="(item, index) in audienceMember" v-bind:data-uid="item.userId" v-bind:data-title="item.realName"
                                    class="member-li">
                                    <img v-bind:src="item.logo" class="head-img mr10" v-cloak>
                                    <span class="p1" v-bind:title="item.realName" v-cloak>{{item.realName}}</span>
                                    <span class="tab-status"></span>
                            </ul>
                        </el-scrollbar>
                    </el-tab-pane>
                </el-tabs>

            </div>
            <div class="video-con">
                <div class="vc-top">
                    <!-- 视频窗口 -->
                    <el-scrollbar class="vm-con clearfix">

                    <div class="clearfix lihe-norm" v-if="!(isAdmin && isAudience)">
                        <div class="float-l tab-group-v">
                            <button class="btn-blue change-btn" v-on:click="ApplyForSpeech" v-cloak>{{applyText}}</button>
                        </div>
                        <p v-if="!isChrome" style="line-height:30px;margin-left:100px;">建议使用Chrome浏览器</p>
                    </div>

                        <div class="vct-top" id="videos-container"></div>
                    </el-scrollbar>
                </div>
            </div>

            <!-- 研讨窗口 -->
            <div id="disDiv" class="discuss-con posr" v-show="screenModel">
                <iframe id="DiscussIframe" frameborder="0" style="width:100%;height:100%"></iframe>
            </div>
        </el-main>
        <!-- 设置弹窗 -->
        <el-dialog visible width="750px" v-bind:visible.sync="dialogVisible" v-cloak>
            <el-form ref="form" label-width="120px">
                <el-form-item label="摄像头：">
                    <el-select v-model="value_camera">
                        <el-option v-for="item in videoinputList" :key="item.value" :label="item.label" :value="item.value">
                        </el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label="麦克风：">
                    <el-select v-model="value_audio" v-bind:change="ChangeAudio">
                        <el-option v-for="item in audioinputList" :key="item.value" :label="item.label" :value="item.value">
                        </el-option>
                    </el-select>
                    <el-progress :percentage="audio_percentage"></el-progress>
                </el-form-item>
                <el-form-item label="摄像头分辨率：">
                    <el-select v-model="value_reso">
                        <el-option label="1080p" value="0">1080p</el-option>
                        <el-option label="720p" value="1">720p</el-option>
                        <el-option label="480p" value="2">480p</el-option>
                        <el-option label="360p" value="3">360p</el-option>
                        <el-option label="240p" value="4">240p</el-option>
                        <el-option label="180p" value="5">180p</el-option>
                        <el-option label="120p" value="6">120p</el-option>
                    </el-select>
                </el-form-item>
            </el-form>
            <span slot="footer" class="dialog-footer">
                <el-button type="primary" v-on:click="ChangeCamera">确 定</el-button>
                <el-button v-on:click="dialogVisible = false">取 消</el-button>
            </span>
        </el-dialog>
    </el-container>
    <div>
        <video controls="" autoplay="" style="display:none" id="video-preview"></video>
        <canvas id="canvass" style="display:none"></canvas>
    </div>
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<!-- 引入vue组件库 -->
<script src="~/Content/VideoMeeting/js/vue.js"></script>
<script src="~/Content/VideoMeeting/js/index.js"></script>
<script src="~/Content/VideoMeeting/js/vue-resource.js"></script>

<script src="~/Content/VideoMeeting/js/date.js"></script>
<!-- 引入二维码组件 -->
<script src="~/Content/VideoMeeting/js/jquery.qrcode.min.js"></script>
<!-- 引入Janus组件库 -->
<script type="text/javascript" src="~/Content/VideoMeeting/Janus/js/adapter.js"></script>
<script type="text/javascript" src="~/Content/VideoMeeting/Janus/js/janus.js"></script>
<script type="text/javascript" src="~/Content/VideoMeeting/Janus/js/janus-common.js"></script>
<script src="~/Content/VideoMeeting/js/vue-infinite-loading.js"></script>




<script>
   Vue.http.options.root = 'https://oaokcs.cnki.net';
   Vue.http.headers.common['ignore-identity'] = "true";//调用相关接口的是时候，绕过验证

   new Vue({
      el: '#app',
      data: function () {
         return {
            visibleQRCode:false,//二维码显示
            initialize: false,//默认初始化是没完成的
            isChrome: false,//是否是Chrome浏览器
            applyingResult: false,//申请发言的结果
            applying: false,//正在申请发言
            applyText: "申请发言",
            adminUid: '',//当前主持人的uid
            isAdmin: false,//是否是管理员标记
            isFullScreen: false,//全屏标记
            audioContext: null,//麦克风显示音量的context
            audio_percentage: 0,//麦克风音量值
            value_camera: '',//当前选中的摄像头
            value_audio: '',//当前选中的麦克风
            value_reso: "2",//分辨率下拉列表的值
            value_profile: '480p',//分享摄像头的时候，对应的分辨率，默认为480p
            rightActiveName: 'first',//右侧展示的面板
            leftActiveName: "first",//左侧展示的面板 first表示成员面板，second表示观众面板
            showLeft: false, //左侧隐藏与显示（反着的）
            showRight: false, //右侧隐藏与显示（反着的）
            members: [], //群组成员数组
            memberids: [], //群组成员数组(只有id)
            onlineCount: 0, //当前在线成员数量
            totalCount: 0, //群组中成员总数量
            isMember: false, //当前用户是否是群组成员，如果不是，则关闭窗口
            hasCamera: false, //是否有摄像头
            conferenceMsgs: [], //右侧讨论消息
            uid: "@ViewBag.uid", //当前用户的userid
            trueName: "@ViewBag.trueName", //当前用户的真实姓名
            conferenceId: "@ViewBag.cid", //当前视频会议id
            roomId:@ViewBag.roomId,
            msgContent: "", //发表意见的内容
            btnDisable: false,
            datetime: new Date().Format("yyyy-MM-dd hh:mm:ss"), //右侧讨论区滚动的时候，请求数据的时候，请求小于这个时间的10条数据
            isFocused: false, //平铺或者演讲者(主持人)模式 默认为平铺的
            discussId: "@ViewBag.discussid", //如果创建了协同研讨，那么存放协同研讨的id，否则为空字符串
            liveType: "camera", //分享的类型 camera 和 desktop 默认为camera
            onLiveUserList: [], //当前正在直播用户
            isOnLive: false,//是否正在分享
            dialogVisible: false,//显示设置弹窗
            resharpMessage: '演讲者模式',
            videoinputList: [],//视频设备列表
            audioinputList: [],//音频设备
            screenModel: false,//大屏模式开关
            audienceMember: [],//观众成员
            isLive:@ViewBag.type,//是否直播，这里用int表示，1表示是，0 表示否，对应DiscussionMeet中的Type字段
            isAudience: false,//是否是观众，进入到直播间，不是会议成员则是普通观众，观众信息存放在redis中
            onlineCount_Audience:0,//观众在线人数
            remoteFeeds: [],//其他在线用户集合
            creator:'',//群组管理员
         }
      },
       created: function () {
           var self = this;


            //生成二维码方法
            function toUtf8(str) {
                var out, i, len, c;
                out = "";
                len = str.length;
                for (i = 0; i < len; i++) {
                c = str.charCodeAt(i);
                if ((c >= 0x0001) && (c <= 0x007F)) {
                    out += str.charAt(i);
                } else if (c > 0x07FF) {
                    out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));
                    out += String.fromCharCode(0x80 | ((c >> 6) & 0x3F));
                    out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));
                } else {
                    out += String.fromCharCode(0xC0 | ((c >> 6) & 0x1F));
                    out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));
                }
                }
                return out;
            }

            //生成二维码---start---
            var str = toUtf8("https://oaokcs.cnki.net/Live/MeetRtc/ShareMeeting?mid="+"@ViewBag.cid");

            $("#QRCode").qrcode({
                render: "table",
                width: 320,
                height: 320,
                text: str
            });
            //生成二维码---end---


           var server = "wss://rtc.cnki.net/janus";
           window.janus = null;
           window.sfutest = null;
           window.opaqueId = "videoroom-" + self.conferenceId;
           window.mypvtid = null;
           //获取Url中后面的参数值
            window.getUrlKey = function (name) {
                return (
                    decodeURIComponent(
                        (new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(
                            location.href
                        ) || [, ''])[1].replace(/\+/g, '%20')
                    ) || null
                );
            }
            //允许发言后，重新打开界面，加个参数 isOnLive=1
         if (getUrlKey("isOnLive") == 1 || getUrlKey("isOnLive") == "1") {
            self.isOnLive = true;
            self.applyingResult = true;
         }

           window.CreateJanus = function () {
               Janus.init({
                   debug: "all",
                   callback: function () {
                       if (!Janus.isWebrtcSupported()) {
                           console.error("您的浏览器不支持WebRTC，请使用Chrome浏览器。");
                           return;
                       }
                       janus = new Janus(
                           {
                               server: server,
                               iceServers: [{ urls: "stun:www.385073012.cn:3478" }, { urls: "turn:www.385073012.cn:3478", username: "cnki", credential: "123456" }],
                               success: function () {
                                   janus.attach(
                                       {
                                           plugin: "janus.plugin.videoroom",
                                           opaqueId: opaqueId,
                                           success: function (pluginHandle) {
                                               sfutest = pluginHandle;
                                               Janus.log("Plugin attached! (" + sfutest.getPlugin() + ", id=" + sfutest.getId() + ")");
                                               Janus.log("  -- This is a publisher/manager");
                                               //以下这个方法会触发查找摄像头请求  判断是否有摄像头，再创建房间，然后会触发publishOwnFeed方法
                                               Janus.listDevices(initDevices);
                                           },
                                           error: function (error) {
                                               console.error("  -- Error attaching plugin...", error);
                                               console.error("Error attaching plugin... " + error);
                                           },
                                           consentDialog: function (on) {
                                               Janus.debug("Consent dialog should be " + (on ? "on" : "off") + " now");
                                           },
                                           mediaState: function (medium, on) {
                                               Janus.log("Janus " + (on ? "started" : "stopped") + " receiving our " + medium);
                                           },
                                           webrtcState: function (on) {
                                               if (!on) {
                                                   //加載中...
                                                   return;
                                               }

                                           },
                                           onmessage: function (msg, jsep) {
                                               //查看房间创建房间信息
                                               var event = msg["videoroom"];
                                               if (event != undefined && event != null) {
                                                   if (event === "joined") {
                                                       //自己加入了房间
                                                       myid = msg["display"];
                                                       mypvtid = msg["private_id"];

                                                       if (self.isAudience) {
                                                               publishOwnFeed('none');
                                                       } else {
                                                           if(self.isOnLive || self.isAdmin){
                                                            if (self.hasCamera) {
                                                               publishOwnFeed('camera');
                                                           } else {
                                                               publishOwnFeed('desktop');
                                                           }
                                                            }else {
                                                publishOwnFeed('none');
                                            }

                                                           
                                                       }
                                                       


                                                       //这里的publishers表示已经在这个房间中的成员
                                                       if (msg["publishers"] !== undefined && msg["publishers"] !== null) {
                                                           var list = msg["publishers"];
                                                           for (var f in list) {
                                                               var id = list[f]["id"];
                                                               var display = list[f]["display"];//这里存的是我们要用的uid
                                                               var audio = list[f]["audio_codec"];
                                                               var video = list[f]["video_codec"];
                                                               newRemoteFeed(id, display, audio, video);
                                                               UserOnline(display);


                                                           }
                                                       }
                                                   } else if (event === "destroyed") {
                                                       // The room has been destroyed
                                                       console.warn("The room has been destroyed!");
                                                       console.error("The room has been destroyed", function () {
                                                           window.location.reload();
                                                       });
                                                   } else if (event === "event") {
                                                       if (msg["publishers"] !== undefined && msg["publishers"] !== null) {
                                                           //别人加入了房间会来到这个方法  算是一个监听
                                                           var list = msg["publishers"];
                                                           for (var f in list) {
                                                               var id = list[f]["id"];
                                                               var display = list[f]["display"];//这个是真正的uid
                                                               var audio = list[f]["audio_codec"];
                                                               var video = list[f]["video_codec"];
                                                               newRemoteFeed(id, display, audio, video);
                                                               UserOnline(display);
                                                           }
                                                       } else if ((msg["leaving"] !== undefined && msg["leaving"] !== null)) {
                                                           var leaving = msg["leaving"];//要离开的用户的id  并不是真的uid 真的uid是存放在display中的
                                                           var remoteFeed = null;
                                                           //遍历下远端feeds
                                                           var index = self.remoteFeeds.findIndex(item => {
                                                               if (item.rfid == leaving) {
                                                                   return true;
                                                               }
                                                           })
                                                           if (index != -1) {
                                                               remoteFeed = self.remoteFeeds[index];
                                                               if (remoteFeed != null) {
                                                                   RemovePlayerElement(remoteFeed.display)
                                                                   remoteFeed.detach();
                                                                   self.remoteFeeds.splice(index, 1)
                                                                   //去掉摄像头标记
                                                                   UserOffline(remoteFeed.display);
                                                                   SetIsSpeaking(remoteFeed.display, false);
                                                               }
                                                           }
                                                       }
                                                       else if (msg["unpublished"] !== undefined && msg["unpublished"] !== null) {
                                                           //leaving和unpublished都会导致无法收到文字消息
                                                           var leaving = msg["unpublished"];//要离开的用户的id 并不是真的uid 真的uid是存放在display中的
                                                           var remoteFeed = null;
                                                           //遍历下远端feeds
                                                           var index = self.remoteFeeds.findIndex(item => {
                                                               if (item.rfid == leaving) {
                                                                   return true;
                                                               }
                                                           })
                                                           if (index != -1) {
                                                               remoteFeed = self.remoteFeeds[index];
                                                               if (remoteFeed != null) {
                                                                   RemovePlayerElement(remoteFeed.display)
                                                                   //remoteFeed.detach();
                                                                   //去掉摄像头标志
                                                                   SetIsSpeaking(remoteFeed.display, false);
                                                               }
                                                           }
                                                       }

                                                   }
                                               }
                                               if (jsep !== undefined && jsep !== null) {
                                                   Janus.debug("Handling SDP as well...");
                                                   Janus.debug(jsep);
                                                   sfutest.handleRemoteJsep({ jsep: jsep });
                                               }
                                           },
                                           onlocalstream: function (stream) {

                                               if (stream.getVideoTracks().length == 0) {
                                                   return;
                                               }

                                               //如果不是管理员，在第一次加入后，会自动打开摄像头，这时候需要判断下以下两个参数，才能给开启

                                               if (self.isAdmin || self.applyingResult || self.isOnLive) {
                                                   //本地视频流
                                                   var config = {
                                                       uid: self.uid,//当前用户id
                                                       videoid: 'video_' + self.uid,//生成的video的id
                                                       realName: self.trueName,//真实姓名
                                                       muteAudio: function () {
                                                           sfutest.muteAudio();
                                                       },//静音方法
                                                       unmuteAudio: function () {
                                                           sfutest.unmuteAudio();
                                                       },//静音静音方法
                                                       muteVideo: function () {
                                                           sfutest.createOffer(
                                                               {
                                                                   media: { removeVideo: true, removeAudio: !self.hasCamera, },
                                                                   success: function (jsep) {
                                                                       Janus.debug(jsep);
                                                                       sfutest.send({ message: { audio: true, video: true, }, "jsep": jsep });
                                                                   },
                                                                   error: function (error) {
                                                                       console.error("WebRTC error... " + JSON.stringify(error));
                                                                   }
                                                               });
                                                       },//关闭视频方法
                                                       unmuteVideo: function () {
                                                           if (self.hasCamera) {
                                                               sfutest.createOffer(
                                                                   {
                                                                       media: { addVideo: true },
                                                                       success: function (jsep) {
                                                                           Janus.debug(jsep);
                                                                           sfutest.send({ message: { audio: true, video: true }, "jsep": jsep });
                                                                       },
                                                                       error: function (error) {
                                                                           alert("WebRTC error... " + JSON.stringify(error));
                                                                       }
                                                                   });
                                                           }
                                                           else {
                                                               publishOwnFeed('desktop');
                                                           }
                                                       },//取消关闭视频方法
                                                       gdVideo: function () {
                                                           unpublishOwnFeed();
                                                           SetIsSpeaking(self.uid, false);
                                                       },//挂断图标对应的挂断方法
                                                   };
                                                   var mediaElement = CreatePlayerElement(config);
                                                   Janus.attachMediaStream(mediaElement, stream);

                                               }
                                           },
                                           ondataopen: function (data) {

                                           },
                                           ondata: function (data) {

                                           },
                                           onremotestream: function (stream) {

                                           },
                                           oncleanup: function () {
                                               Janus.log(" ::: Got a cleanup notification: we are unpublished now :::");
                                           }
                                       });
                               },
                               error: function (error) {
                                   console.error(error);

                               },
                               destroyed: function () {
                                   window.location.reload();
                               }
                           });
                   }
               });


           }

           window.publishOwnFeed = function (type) {
               if (type == 'camera') {
                   //分享摄像头
                   sfutest.createOffer(
                       {
                           media: {
                               audioRecv: false, videoRecv: false, audioSend: true, videoSend: true, data: true,
                               replaceVideo: true,
                               replaceAudeo: true,
                           },	// Publishers are sendonly
                           success: function (jsep) {
                               var publish = { "request": "configure", "audio": true, "video": true, "data": true, };
                               sfutest.send({ "message": publish, "jsep": jsep });
                               UserOnline(self.uid);
                               SetIsSpeaking(self.uid, true);
                               self.liveType = type;
                               self.isOnLive = true;
                           },
                           error: function (error) {
                               console.error("WebRTC error:", error);

                           }
                       });
               } else if (type == 'desktop') {
                   //分享桌面
                   sfutest.createOffer(
                       {
                           media: {
                               audioRecv: false, videoRecv: false, audioSend: true, videoSend: true, data: true, captureDesktopAudio: true, "video": "screen",
                               replaceVideo: true,
                               replaceAudeo: true,
                           },
                           success: function (jsep) {
                               var publish = { "request": "configure", "audio": true, "video": true, "data": true };
                               sfutest.send({ "message": publish, "jsep": jsep });
                               UserOnline(self.uid);
                               SetIsSpeaking(self.uid, true);
                               self.liveType = type;
                               self.isOnLive = true;
                           },
                           error: function (error) {
                               console.error("WebRTC error:", error);

                           }
                       });
               } else if (type == 'none') {
                   //只观看，什么都不分享
                   sfutest.createOffer(
                       {
                           media: { audioRecv: false, videoRecv: false, audioSend: false, videoSend: false, data: true, },
                           success: function (jsep) {
                               var publish = { "request": "configure", "audio": true, "video": true, "data": true };
                               sfutest.send({ "message": publish, "jsep": jsep });
                               UserOnline(self.uid);
                               self.liveType = type;
                               self.isOnLive = false;
                           },
                           error: function (error) {
                               console.error("WebRTC error:", error);
                           }
                       });
               }

           }
           window.createRoom = function () {
               //创建房间
               var body = { "request": "create", "room": self.roomId, "publishers": 100, "bitrate": 2*1024 * 1024, "bitrate_cap": true, };
               sfutest.send({
                   "message": body,
                   success: function (result) {
                       //加入房间，若房间已经存在，则直接加入
                       var register = { "request": "join", "room": self.roomId, "ptype": "publisher", "display": self.uid };
                       sfutest.send({ "message": register });
                   }
               })
           }
           //
           window.newRemoteFeed = function (id, uid, audio, video) {
               var remoteFeed = null;
               janus.attach(
                   {
                       plugin: "janus.plugin.videoroom",
                       opaqueId: opaqueId,
                       success: function (pluginHandle) {
                           remoteFeed = pluginHandle;
                           remoteFeed.simulcastStarted = false;
                           var subscribe = { "request": "join", "room": self.roomId, "ptype": "subscriber", "feed": id, "private_id": mypvtid };
                           if (Janus.webRTCAdapter.browserDetails.browser === "safari" &&
                               (video === "vp9" || (video === "vp8" && !Janus.safariVp8))) {
                               if (video)
                                   video = video.toUpperCase()
                               toastr.warning("Publisher is using " + video + ", but Safari doesn't support it: disabling video");
                               subscribe["offer_video"] = false;
                           }
                           remoteFeed.videoCodec = video;
                           remoteFeed.send({ "message": subscribe });
                       },
                       error: function (error) {
                           console.error("  -- Error attaching plugin...", error);
                           console.error("Error attaching plugin... " + error);
                       },
                       onmessage: function (msg, jsep) {
                           var event = msg["videoroom"];
                           if (msg["error"] !== undefined && msg["error"] !== null) {
                               console.error(msg["error"]);
                           } else if (event != undefined && event != null) {
                               if (event === "attached") {
                                   UserOnline(uid);//设置为正在分享视频状态
                                   remoteFeed.rfid = msg['id'];
                                   remoteFeed.display = uid;
                                   //遍历下远端feeds
                                   var index = self.remoteFeeds.findIndex(item => {
                                       if (item.display == uid) {
                                           return true;
                                       }
                                   })
                                   if (index !== -1) {
                                       self.remoteFeeds.splice(index, 1);
                                   }
                                   self.remoteFeeds.push(remoteFeed);
                                   SetIsSpeaking(uid, false)
                                   if (audio != null || video != null) {
                                       SetIsSpeaking(uid, true)
                                   }
                               } else if (event === "event") {
                               } else {
                               }
                           }
                           if (jsep !== undefined && jsep !== null) {
                               // Answer and attach
                               remoteFeed.createAnswer(
                                   {
                                       jsep: jsep,
                                       media: { audioSend: false, videoSend: false, data: true },
                                       success: function (jsep) {
                                           var body = { "request": "start", "room": self.roomId };
                                           remoteFeed.send({ "message": body, "jsep": jsep });
                                       },
                                       error: function (error) {
                                           console.error("WebRTC error:", error);
                                           console.error("WebRTC error... " + JSON.stringify(error));
                                       }
                                   });
                           }
                       },
                       ondataopen: function (data) {

                       },
                       ondata: function (data) {
                           //收到消息
                           //在这里收到其他人的消息
                           var obj = JSON.parse(data);
                           var content = JSON.parse(obj.text);
                           /*
                              0 表示聊天消息
                              1 表示当前正在分享用户个数的消息 暂时没用到了,已经移除了此类消息
                              2 表示xxx用户离线的消息 暂时没用到了,已经移除了此类消息
                              3 表示xxx用户申请发言
                              4 表示主持人同意发言
                              5 表示主持人拒绝发言
                              6 表示xxx用户停止发言
                              7 表示新的观众
                              8 表示新的用户头像
                           */
                           if (content.type === 0) {
                               //聊天消息
                               GetMessage(content.content);
                           }
                           else if (content.type === 1) {
                               //当前正在分享用户个数的消息 暂时没用到了
                               SetOnLiveUserList(content.content);
                           }
                           else if (content.type === 2) {
                               //离线消息
                               UserOffline(event.userid)
                               var mediaElement = document.getElementById(event.userid);
                               if (mediaElement) {
                                   mediaElement.parentNode.removeChild(mediaElement);
                               }
                           } else if (content.type === 3) {
                               //申请发言
                               GetApplyForSpeech(content.content)
                           } else if (content.type === 4) {
                               //同意发言
                               GetAgreeSpeech(content.content)
                           } else if (content.type === 5) {
                               //拒绝发言
                               GetDisAgreeSpeech(content.content)
                           } else if (content.type === 6) {
                               //xxx发言被挂断
                               GetStopSpeech(content.content)
                           }else if (content.type === 7) {
                               //新的观众
                               GetNewAudience(content.content)
                           }else if (content.type === 8) {
                               //xxx发言被挂断
                               GetNewPhoto(content.content)
                           }
                       },
                       webrtcState: function (on) {
                       },
                       onlocalstream: function (stream) {
                       },
                       onremotestream: function (stream) {


                           stream.oninactive = function (event) {
                               RemovePlayerElement(uid);
                               SetIsSpeaking(uid, false);
                               return false;
                           };

                           var config = {
                               uid: uid,//当前用户id
                               videoid: 'video_' + uid,//生成的video的id
                               realName: "",//真实姓名
                               muteAudio: null,//静音方法
                               unmuteAudio: null,//静音静音方法
                               muteVideo: null,//关闭视频方法
                               unmuteVideo: null,//取消关闭视频方法
                               gdVideo: null,//挂断图标对应的挂断方法
                           };
                           var mediaElement = CreatePlayerElement(config);
                           Janus.attachMediaStream(mediaElement, stream);
                           UserOnline(uid);
                           SetIsSpeaking(uid, true);

                       },

                       oncleanup: function () {

                       }
                   });
           }


           window.initDevices = function (devices) {
               if (devices.length == 0) {
                   //无摄像头
                   self.hasCamera = false;
               } else {

                   var index = devices.findIndex(item => {
                       if (item.kind == 'videoinput') {
                           return true;
                       }
                   });
                   if (index == -1) {
                       //无摄像头
                       self.hasCamera = false;
                   } else {
                       self.hasCamera = true;
                   }
               }

               createRoom();
           }

           window.addStreamStopListener = function (stream, callback) {
               stream.addEventListener('ended', function () {
                   callback();
                   callback = function () { };
               }, false);
               stream.addEventListener('inactive', function () {
                   callback();
                   callback = function () { };
               }, false);
               stream.getTracks().forEach(function (track) {
                   track.addEventListener('ended', function () {
                       callback();
                       callback = function () { };
                   }, false);
                   track.addEventListener('inactive', function () {
                       callback();
                       callback = function () { };
                   }, false);
               });
           }

           window.changeBitrate = function (value) {
               var bitrate = parseInt(value) * 1024;
               sfutest.send({ "message": { "request": "configure", "bitrate": bitrate } });
           }

           //发送聊天消息
           window.sendData = function (content) {
               /*
                    0 表示聊天消息
                    1 表示当前正在分享用户个数的消息
                    2 表示xxx用户离线的消息
                    3 表示xxx用户申请发言
                    4 表示主持人同意发言
                    5 表示主持人拒绝发言
                    6 表示xxx用户停止发言
                    7 表示新的观众
                    8 表示新的用户头像
                */

               var message = {
                   textroom: "message",//表示发送的是message类型
                   transaction: "message",//暂时未用到，可能包含在回调中
                   room: self.roomId,
                   text: content,
               };
               sfutest.data({
                   text: JSON.stringify(message),
                   error: function (reason) { console.error(reason); },
                   success: function () {
                       $('#data').val('');
                   }
               });
           }


           window.unpublishOwnFeed = function () {
               self.applying = false;
               self.applyingResult = false;
               self.applyText = "申请发言";
               sfutest.createOffer(
                   {
                       iceRestart: true,
                       media: { removeVideo: true, removeAudio: true, data: true, audioSend: false, videoSend: false, },
                       success: function (jsep) {
                           Janus.debug(jsep);
                           var publish = { "request": "configure", "audio": false, "video": false, "data": true };
                           sfutest.send({ "message": publish, "jsep": jsep });
                           RemovePlayerElement(self.uid);
                           self.liveType = "none";
                       },
                       error: function (error) {
                           console.error("WebRTC error... " + JSON.stringify(error));
                       }
                   });
           }

           //检测到网络发生变化时，重新进行ICE协商
           window.netChange = function () {
               sfutest.createOffer({
                   iceRestart: true,
                   media: { data: true },
                   success: function (jsep) {
                       echotest.send({ message: { audio: true, video: true }, jsep: jsep });
                   }
               });
           }


           var indexChrome = navigator.userAgent.indexOf("Chrome");
           if (indexChrome != -1) {
               self.isChrome = true;
           }

           //监听最大化与最小化
           document.addEventListener("fullscreenchange", function (e) {
               self.isFullScreen = !self.isFullScreen;
               if (!(document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement)) {
                   self.isFullScreen = false;
               }
               self.showLeft = self.isFullScreen;
               self.showRight = self.isFullScreen;
           });
           document.addEventListener("mozfullscreenchange", function (e) {
               self.isFullScreen = !self.isFullScreen;
               if (!(document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement)) {
                   self.isFullScreen = false;
               }
               self.showLeft = self.isFullScreen;
               self.showRight = self.isFullScreen;
           });
           document.addEventListener("webkitfullscreenchange", function (e) {
               self.isFullScreen = !self.isFullScreen;
               if (!(document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement)) {
                   self.isFullScreen = false;
               }
               self.showLeft = self.isFullScreen;
               self.showRight = self.isFullScreen;
           });
           document.addEventListener("msfullscreenchange", function (e) {
               self.isFullScreen = !self.isFullScreen;
               if (!(document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement)) {
                   self.isFullScreen = false;
               }
               self.showLeft = self.isFullScreen;
               self.showRight = self.isFullScreen;
           });
           //当前用户id
           window.uid = self.uid;

           //获取是否是主持人模式状态
           window.getFocusedStatus = function () {
               return self.isFocused;
           }

           window.GetFocusedWidthHeight = function () {
               var width = $("#videos-container").width() - 16;
               //根据宽度，获取对应的4:3的高度
               var height = width * 3 / 4 + 6;
               return { height: height, width: width };
           }

           window.GetFocusedWidthHeightDown = function () {
               var width = $("#videos-container").width() / 3 - 18;
               var height = width * 3 / 4 + 6;
               return { height: height, width: width };
           }

           window.GetOverLayedWidthHeight = function () {
               var width = $("#videos-container").width() / 2 - 14;
               var height = width * 3 / 4 + 6;
               return { height: height, width: width };
           }
           //关闭当前窗口函数，后面会调用
           window.CloseWindow = function () {
               var userAgent = navigator.userAgent;
               if (userAgent.indexOf("Firefox") != -1 || userAgent.indexOf("Chrome") != -1) {
                   location.href = "about:blank";
               } else {
                   window.opener = null;
                   window.open('', '_self');
               }
               window.close();
           };


         //用户上线，改变状态
         window.UserOnline = function (uid) {
            var ele = $(".member-ul li[data-uid='" + uid + "']");
            if (ele.length !== 0) {
               if (!ele.find(".tab-status").hasClass("in")) {
                  ele.find(".tab-status").addClass("in");
                  if (ele.index() === 0) {
                     //第一个固定不动
                  } else {
                     //添加到正在发言人的用户后面
                     ele.fadeOut(10).fadeIn(100);
                     var liveCount = $(".member-ul").find("li.live").length;

                     $(ele).insertAfter($(".member-ul").find("li").eq(liveCount));
                  }
                   self.onlineCount++;
               }
            } else {
                //判断观众列表
                if (self.isLive == 1) {
                    //audience-ul
                    var ele = $(".audience-ul li[data-uid='" + uid + "']");
                    if (ele.length !== 0) {
                        if (!ele.find(".tab-status").hasClass("in")) {
                            ele.find(".tab-status").addClass("in");
                            ele.fadeOut(10).fadeIn(100);
                            $(ele).insertAfter($(".audience-ul").find("li").eq(0))
                            self.onlineCount_Audience++;
                        }
                    }
                }
            }


         }
         //用户离线，改变状态
         window.UserOffline = function (uid) {
            var ele = $(".member-ul li[data-uid='" + uid + "']");
            if (ele.length !== 0) {
                if (ele.hasClass("live")) {
                  ele.removeClass("live");
               }
               if (ele.find(".tab-status").hasClass("in")) {
                  ele.find(".tab-status").removeClass("in");
                  if (ele.index() === 0) {
                     //第一个固定不动
                  } else {
                     ele.fadeOut(10).fadeIn(100);
                     $(".member-ul").append(ele);
                  }
                  self.onlineCount--;
               }
            } else {
               //判断观众列表
                if (self.isLive == 1) {
                    //audience-ul
                    var ele = $(".audience-ul li[data-uid='" + uid + "']");
                    if (ele.length !== 0) {
                        if (ele.find(".tab-status").hasClass("in")) {
                            ele.find(".tab-status").removeClass("in");
                            ele.fadeOut(10).fadeIn(100);
                            $(".audience-ul").append(ele);
                            self.onlineCount_Audience--;
                        }
                    }
                }
            }
         }

         window.GetHasCamera = function (b) {
            return self.hasCamera;
         }

         //是否正在分享
         window.SetIsOnLive = function (b) {
            self.isOnLive = b;
         }

         //设置为焦点
         window.SetFocus = function (uid) {
            //1.获取到div   2.放到第一个   3.宽度修改
            var ele = document.getElementById("div_" + uid);
            var eleOld = document.getElementById("videos-container").firstChild;
            if ($(eleOld).attr("data-uid") === uid && self.isFocused) {
               //点击了已经处于焦点的视频
               return;
            } else {
               self.isFocused = true;
               //移动ele到第一位
               $(ele).prependTo("#videos-container");
               self.resharpElementFocus();
            }
         }
         //左侧请求群组成员
         this.GetGroupMembers();

         //收到其他用户的消息
         window.GetMessage = function (data) {
            self.conferenceMsgs.push(data);
            self.ScrollToBottom();
         }

         //管理员收到发言申请
         window.GetApplyForSpeech = function (content) {
            if (self.isAdmin) {
               var ele = $(".member-ul li[data-uid='" + content.uid + "']");
                if (ele.length !== 0) {
               if (ele.find(".icon-yes").hasClass("hide")) {
                  ele.find(".icon-yes").removeClass("hide");
               }
               if (ele.find(".icon-no").hasClass("hide")) {
                  ele.find(".icon-no").removeClass("hide");
               }
               ele.fadeOut(100).fadeIn(100);
                  $(ele).insertAfter($(".member-ul").find("li").eq(0))
            } else {
               console.log("GetApplyForSpeech Error! 未找到对应的成员" + uid);
            }
            }

         }
         //用户收到管理员的同意发言
         window.GetAgreeSpeech = function (uid) {

        var ele = $(".member-ul li[data-uid='" + uid + "']");
            if (ele.length !== 0) {
               if (ele.find(".icon-sxt").hasClass("hide")) {
                  ele.find(".icon-sxt").removeClass("hide");
               }
               if (ele.index() !== 0) {
                  ele.fadeOut(100).fadeIn(100);
                  $(ele).insertAfter($(".member-ul").find("li").eq(0))
               }
            } else {
               console.log("GetAgreeSpeech Error! 未找到对应的成员" + uid);
            }
            if (uid == self.uid) {
               if (getUrlKey("isOnLive") == 1 || getUrlKey("isOnLive") == "1") {
                  self.applying = false;
                  self.applyingResult = true;
                  self.applyText = "正在发言";
                  //开启摄像头/桌面
                  if (self.hasCamera) {
                     publishOwnFeed('camera');
                  } else {
                     publishOwnFeed('desktop');
                  }
               } else {
                  window.location = location.href + "&isOnLive=1";
               }
            }
         }
         //用户收到管理员的拒绝发言
         window.GetDisAgreeSpeech = function (uid) {
            var ele = $(".member-ul li[data-uid='" + uid + "']");
            if (ele.length !== 0) {
               if (!ele.find(".icon-sxt").hasClass("hide")) {
                  ele.find(".icon-sxt").addClass("hide");
               }
            } else {
               console.log("GetDisAgreeSpeech Error! 未找到对应的成员" + uid);
            }

            if (uid == self.uid) {
               self.applying = false;
               self.applyingResult = false;
               self.applyText = "申请发言";
               self.ChangeVideoSource("none");

               self.$message({
                  showClose: true,
                  message: '主持人拒绝了您的申请发言',
                  type: 'warning'
               });
            }
         }


          //用户收到管理员的停止发言
         window.GetStopSpeech = function (uid) {
            SetIsSpeaking(uid,false);
            if (uid == self.uid) {
               self.ChangeVideoSource("none");
               self.$message({
                  showClose: true,
                  message: '主持人停止了您的发言',
                  type: 'warning'
               });
            }
          }

          //用户收到其他新的观众进入房间
         window.GetNewAudience = function (data) {
             var audience = self.audienceMember.filter(function (n) {
                 return n.userId == data.uid;
             });
             if (audience != null && audience.length == 1) {
                 //已经是观众，不用再调用添加
                self.onlineCount_Audience++;
             }
             else {
                 self.audienceMember.unshift(data);
                 var ele = $(".audience-ul li[data-uid='" + data.uid + "']");
                 if (ele.length !== 0) {
                    if (!ele.find(".tab-status").hasClass("in")) {
                        ele.find(".tab-status").addClass("in");
                        self.onlineCount_Audience++;
                    }
                }
             }
          }

          //用户收到其他用户的新的头像(更新头像使用)
         window.GetNewPhoto = function (data) {
              //var ele = $(".member-ul li[data-uid='" + data.uid + "']");
              //if (ele.length !== 0) {
              //    var imag = $(ele).children('img');
              //    imag.attr("src", data.photo)
              //}

              var m = self.members.filter(function (n) {
                  return n.userId == data.uid;
              });
              if (m != null && m.length == 1) {
                  m[0].logo = data.photo;
              }
           }
           //设置为发言状态/  不发言状态
         window.SetIsSpeaking = function (uid, b) {
            var ele = $(".member-ul li[data-uid='" + uid + "']");
            if (b) {

               if (ele.length !== 0) {
                   if (ele.find(".icon-sxt").hasClass("hide")) {
                        ele.find(".icon-sxt").removeClass("hide");
                     }
                     if (ele.find(".icon-gd").hasClass("hide")) {
                        ele.find(".icon-gd").removeClass("hide");
                     }
                  if (self.creator != uid) {
                      //管理员不需要添加这个live标记，这个live标记只是用来查询除了管理员以外，打开摄像头的成员
                     if (!ele.hasClass("live")) {
                        ele.addClass("live");
                     }
                     
                  } else {
                    //添加到正在发言人的用户后面
                        ele.fadeOut(10).fadeIn(100);
                        $(ele).insertAfter($(".member-ul").find("li").eq(0))
                  }
               } else {
                  console.log("更新左侧的发言状态 Error! 未找到对应的成员");
               }
            } else {
                if (ele.hasClass("live")) {
                  ele.removeClass("live");
               }
               if (ele.length !== 0) {
                  if (!ele.find(".icon-sxt").hasClass("hide")) {
                     ele.find(".icon-sxt").addClass("hide");
                  } if (!ele.find(".icon-gd").hasClass("hide")) {
                     ele.find(".icon-gd").addClass("hide");
                  }
                 if (self.creator != uid) {
                     //添加到正在发言人的用户后面
                     ele.fadeOut(10).fadeIn(100);
                     var liveCount = $(".member-ul").find("li.live").length;
                     $(ele).insertAfter($(".member-ul").find("li").eq(liveCount+1));
                  } 
               } else {
                  console.log("更新左侧的发言状态 Error! 未找到对应的成员");
               }
            }
         }
      },
       methods: {
           //申请发言
           ApplyForSpeech: function () {
               if (!this.isOnLive) {
                var content = JSON.stringify({ "type": 3, "content": {uid:this.uid,realName:this.trueName} });
                sendData(content);
               this.applying = true;
               this.applyText = "申请中...";
               }
           },
         //同意发言
         AgreeSpeech: function (uid) {
            //同意发言
            var content = JSON.stringify({ "type": 4, "content": uid });
            sendData(content);
            var ele = $(".member-ul li[data-uid='" + uid + "']");
            if (ele.length !== 0) {
               if (!ele.find(".icon-yes").hasClass("hide")) {
                  ele.find(".icon-yes").addClass("hide");
               }
               if (!ele.find(".icon-no").hasClass("hide")) {
                  ele.find(".icon-no").addClass("hide");
               }
            } else {
               console.log("AgreeSpeech Error! 未找到对应的成员" + uid);
            }
         },
         //拒绝发言
         DisAgreeSpeech: function (uid) {
            //拒绝发言
            var content = JSON.stringify({ "type": 5, "content": uid });
            sendData(content);
            var ele = $(".member-ul li[data-uid='" + uid + "']");
            if (ele.length !== 0) {
               if (!ele.find(".icon-yes").hasClass("hide")) {
                  ele.find(".icon-yes").addClass("hide");
               }
               if (!ele.find(".icon-no").hasClass("hide")) {
                  ele.find(".icon-no").addClass("hide");
               }
               if (!ele.find(".icon-gd").hasClass("hide")) {
                  ele.find(".icon-gd").addClass("hide");
               }
               if (!ele.find(".icon-sxt").hasClass("hide")) {
                  ele.find(".icon-sxt").addClass("hide");
               }
            } else {
               console.log("DisAgreeSpeech Error! 未找到对应的成员" + uid);
            }

         },
         //停止发言
         StopSpeech: function (uid) {
            //停止发言 挂断
            var content = JSON.stringify({ "type": 6, "content": uid });
            sendData(content);

            RemovePlayerElement(uid);
            if (uid == this.uid) {
               //主持人挂断自己       
               unpublishOwnFeed();
            } else {
               //主持人挂断其他用户，其他用户通过收到对应的消息来unpublishOwnFeed自己
            }

            var ele = $(".member-ul li[data-uid='" + uid + "']");
            if (ele.length !== 0) {
               if (!ele.find(".icon-yes").hasClass("hide")) {
                  ele.find(".icon-yes").addClass("hide");
               }
               if (!ele.find(".icon-no").hasClass("hide")) {
                  ele.find(".icon-no").addClass("hide");
               }
               if (!ele.find(".icon-gd").hasClass("hide")) {
                  ele.find(".icon-gd").addClass("hide");
               }
               if (!ele.find(".icon-sxt").hasClass("hide")) {
                  ele.find(".icon-sxt").addClass("hide");
               }
            } else {
               console.log("StopSpeech Error! 未找到对应的成员" + uid);
            }
         },



         //右上角的全屏按钮
         FullScreen: function () {
            if (this.isFullScreen) {
               this.ExitFullScreen();
            } else {
               window.launchFullscreen(document.getElementById("appMain"));
            }
         },
         //退出全屏
         ExitFullScreen: function () {
            if (document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement) {
               document.exitFullscreen();
            } else {
               this.isFullScreen = false;
            }
         },

         //显示设置界面并绑定对应的摄像头、麦克风数据源
         ShowSettingDialog: function () {
            if (!this.hasCamera) {
               this.$message.error('未能获取到摄像头设备，请确认摄像头已经连接成功！');
               return;
            }
            if (!this.isOnLive) {
               this.$message.error('请先申请发言！');
               return;
            }
            if (this.liveType != "camera") {
               return;
            }
            this.dialogVisible = true;
            this.videoinputList = [];
            this.audioinputList = [];
            var self = this;
            navigator.mediaDevices.enumerateDevices().then(function (devices) {
               for (var i = 0; i < devices.length; i++) {
                  var device = devices[i];
                  if (device.kind === 'videoinput' && device.label !== 'screen-capture-recorder') {
                     self.videoinputList.push({ value: device.deviceId, label: device.label });
                  }
                  if (device.kind === 'audioinput') {
                     self.audioinputList.push({ value: device.deviceId, label: device.label });
                  }
               };
               if (self.videoinputList.length != 0) {
                  if (self.value_camera == "") {
                     self.value_camera = self.videoinputList[0].value;
                  }
               }
               if (self.audioinputList.length != 0) {
                  if (self.value_audio == "") {
                     self.value_audio = self.audioinputList[0].value;
                  }
                  self.ShowAudioData();
               }
            },
               function () {
                  self.$message.error('未能获取到摄像头设备，请确认摄像头已经连接成功！');
               });
         },
         //显示选中麦克风的音量
         ShowAudioData: function () {
            var self = this;
            navigator.getUserMedia = navigator.mediaDevices.getUserMedia || navigator.getUserMedia || navigator.mozGetUserMedia || navigator.webkitGetUserMedia;
            if (self.audioContext)
               self.audioContext.close();
            self.audioContext = new (window.AudioContext || window.webkitAudioContext)();
            var mediaStreamSource = null;
            var scriptProcessor = null;
            var constraintsAudio = {
               audio: {
                  optional: [{
                     sourceId: self.value_audio,
                  }]
               }
            };


            navigator.getUserMedia(constraintsAudio).then(function (stream) {
               // 将麦克风的声音输入这个对象
               mediaStreamSource = self.audioContext.createMediaStreamSource(stream)
               // 创建一个音频分析对象，采样的缓冲区大小为4096，输入和输出都是单声道
               scriptProcessor = self.audioContext.createScriptProcessor(4096, 1, 1)
               // 将该分析对象与麦克风音频进行连接
               mediaStreamSource.connect(scriptProcessor)
               // 此举无甚效果，仅仅是因为解决 Chrome 自身的 bug
               scriptProcessor.connect(self.audioContext.destination)

               // 开始处理音频
               scriptProcessor.onaudioprocess = function (e) {
                  // 获得缓冲区的输入音频，转换为包含了PCM通道数据的32位浮点数组
                  var buffer = e.inputBuffer.getChannelData(0)
                  // 获取缓冲区中最大的音量值
                  var maxVal = Math.max.apply(Math, buffer)
                  // 显示音量值
                  var val = Math.round(maxVal * 100);
                  if (val > 100) {
                     val = 100;
                  }
                  self.audio_percentage = val;
               };
            }).catch(function (err) {
               self.$message.error(err);
            });
         },

         //麦克风下拉列表触发事件
         ChangeAudio: function (selVal) {
            this.value_audio = selVal;
            this.ShowAudioData();
         },


         //设置界面的确定按钮触发事件
         ChangeCamera: function () {
            var self = this;
            var videoDeviceId = self.value_camera;
            var audioDeviceId = self.value_audio;
            var width = 640;
            var height = 480;

            if (self.value_profile == '1080p') {
               width = 1920;
               height = 1080;
            }
            else if (self.value_profile == '720p') {
               width = 1280;
               height = 720;
            } else if (self.value_profile == '480p') {
               width = 640;
               height = 480;
            } else if (self.value_profile == '360p') {
               width = 640;
               height = 360;
            } else if (self.value_profile == '240p') {
               width = 320;
               height = 240;
            } else if (self.value_profile == '180p') {
               width = 320;
               height = 180;
            } else if (self.value_profile == '120p') {
               width = 160;
               height = 120;
            }

            var body = { "audio": true, "video": true };
            sfutest.send({ "message": body });
            sfutest.createOffer(
               {
                  // We provide a specific device ID for both audio and video
                  media: {
                     audio: {
                        deviceId: {
                           exact: audioDeviceId
                        }
                     },
                     replaceAudio: true,	// This is only needed in case of a renegotiation
                     video: {
                        deviceId: {
                           exact: videoDeviceId
                        },
                        width: width,
                        height: height,
                     },
                     replaceVideo: true,	// This is only needed in case of a renegotiation
                     data: true	// Let's negotiate data channels as well
                  },
                  success: function (jsep) {
                     Janus.debug("Got SDP!");
                     Janus.debug(jsep);
                     sfutest.send({ "message": body, "jsep": jsep });
                  },
                  error: function (error) {
                     console.error("WebRTC error... " + JSON.stringify(error));
                  }
               });

            self.dialogVisible = false;
         },

         //数组比较(后面用于比较当前研讨中的成员和当前会议中的成员)
         arrayCompare: function (arr1, arr2) {
            arr2 = arr2.slice(0);
            arr1 = arr1.slice(0);
            for (var i = 0; i < arr2.length; i++) {
               var count = false;
               for (var l = 0; l < arr1.length; l++) {
                  if (arr2[i] == arr1[l]) {
                     arr2.splice(i, 1);
                     arr1.splice(l, 1);
                     l--;
                     count = true;
                  }
               }
               count ? i = i - 1 : void (0);
            }
            return [arr1, arr2]
         },

          //切换到摄像头显示/切换摄像头源
         ShowCamera: function () {
            var self = this;
            if (self.isAdmin) {
               self.isOnLive = true;
               publishOwnFeed("camera");
               //设置为平铺
               self.resharpElementOverlay();
            } else {
               //普通用户开启摄像头
               self.initialize = true;
               if (self.applyingResult || self.isOnLive) {
                  self.isOnLive = true;
                  self.resharpElementOverlay();
                  publishOwnFeed("camera");
               } else {
                  this.$message('请先申请发言');
                  return false;
               }
            }
         },
         //切换到屏幕分享显示/切换屏幕分享源
         ShowDesktop: function () {
            var self = this;
            if (self.isAdmin) {
               publishOwnFeed("desktop");
               //设置为平铺
               self.isOnLive = true;
               self.resharpElementOverlay();
            } else {
               if (self.applyingResult || self.isOnLive) {
                  self.isOnLive = true;
                  self.resharpElementOverlay();
                  publishOwnFeed("desktop");
               } else {
                  this.$message('请先申请发言');
                  return false;
               }
            }
         },

         //请求会议成员接口 get 同时判断自己是否是该会议成员，如果不是，则关闭窗口
         GetGroupMembers: function () {
            var self = this;
            //视频会议信息
            $.ajax({
                url: '/live/MeetRtc/GetMeetingGroupMember?id=' + self.conferenceId + '&uid=' + self.uid,
                dataType: "json",   //返回格式为json
                type: "get",   //请求方式
                success: function (result) {
                    if (result.Success) {
                        self.totalCount = result.Content.length;
                        self.members = result.Content.slice(0);

                        self.members.forEach(function (item) {
                            self.memberids.push(item.userId);
                            if (self.uid == item.userId) {
                                self.isAdmin = item.isAdmin;
                            }
                            if(item.isAdmin){
                                self.creator=item.userId;
                            }
                        });


                        if(result.Message){
                            //群组成员                            
                            //初始化janus
                            CreateJanus();
                            if (self.isLive == 1)//如果是直播模式
                                self.GetAudienceMembers();
                            //开启扑捉自己头像
                            self.CaptureUserPhoto();

                        }else{
                            //观众成员
                            //根据会议的属性【是否直播】去判断该用户是否可以观看
                            if (self.isLive == 1) {
                                //直播模式
                                self.isAudience = true;
                                self.GetAudienceMembers();
                            } else {
                            setTimeout(function () {
                                    CloseWindow();
                                }, 3000);
                                alert('您暂无权限访问该视频会议！');
                            }
                        }
                    }
                },
            });
         },


         //请求观众成员
         GetAudienceMembers: function () {
            var self = this;
            $.ajax({
                url: '/live/MeetRtc/GetConferenceAudienceMember?id=' + self.conferenceId + '&uid=' + self.uid,
                dataType: "json",   //返回格式为json
                type: "get",   //请求方式
                success: function (result) {
                    if (result.Success) {
                        self.audienceMember = result.Content.slice(0);
                        if (self.isAudience) {
                            //初始化janus
                            CreateJanus();
                            //利用filter函数，判断自己是否是新的观众，如果不在这个列表中，还要发通知，通知其他用户，我这个新的观众上线
                            var audience = self.audienceMember.filter(function (n) {
                                return n.userId == self.uid;
                            });
                            if (audience != null && audience.length == 1) {
                                //已经是观众，不用再调用Post
                            } else {
                                var formData = new FormData(); //FormData构造器接收的是一个form的DOM对象
                                formData.append('id', self.conferenceId);
                                formData.append('uid', self.uid);
                                formData.append('trueName', self.trueName);
                                self.$http.post('live/MeetRtc/CreateAudience', formData, { emulateJson: true }).then(
                                    result => {
                                    if (result.data.Success) {
                                        self.audienceMember.push(result.data.Content);
                                        // 7 表示新的观众用户

                                        var content = JSON.stringify({ "type": 7, "content": result.data.Content });
                                        sendData(content);
                                    }
                                });
                            }
                        }
                    }
                }
            });
          },
         //开启摄像头扑捉用户头像
          CaptureUserPhoto() {
              var self = this;

              //这里调用video会影响摄像头分辨率的设置，在设置修改分辨率的时候，可能会因为这里分享失败
              var videoPreview = document.getElementById('video-preview');
                    navigator.mediaDevices.getUserMedia({
                        audio: false, video:true,
                    }).then(function (participantStream) {
                        videoPreview.srcObject = participantStream;

                        setInterval(self.ChangeImage, 3000)
                    });
          },
          //改变用户头像，每3s采集一次
          ChangeImage() {
              var videoPreview = document.getElementById('video-preview');
              var cxt = document.getElementById('canvass').getContext('2d');
            cxt.drawImage(videoPreview, 0, 0, 300,150);

              var mycanvas = document.getElementById("canvass");
              var image = mycanvas.toDataURL("image/jpeg",0.9);

              var m = this.members.filter(function (n) {
                 return n.userId == self.uid;
              });
              if (m != null && m.length == 1) {
                  m[0].logo = image;
              }
              
            var content = JSON.stringify({ "type": 8, "content": {uid:self.uid,photo:image} });
            sendData(content);              
          },



         //发送讨论消息
           SendMessage: function () {
               var self = this;
               var content = self.msgContent.replace(/\r\n/g, '<br/>').replace(/\n/g, '<br/>').replace(/\s/g, '&nbsp;');
               if (content === "") {
                   self.msgContent = "";
                   return;
               }
               var formData = new FormData(); //FormData构造器接收的是一个form的DOM对象
               formData.append('id', self.conferenceId);
               formData.append('uid', self.uid);
               formData.append('trueName', self.trueName);
               formData.append('msgContent', content);
               self.$http.post('live/MeetRtc/CreateConferenceMsg', formData, { emulateJson: true }).then(
                   result => {
                       if (result.data.Success) {
                           self.conferenceMsgs.push(result.data.Content);
                           self.msgContent = "";
                           var content = JSON.stringify({ "type": 0, "content": result.data.Content });
                           sendData(content)
                           self.ScrollToBottom();
                       } else {
                           this.$message.error('发送消息失败！');
                           console.log(result.data.Error);
                       }
                   });
           },

         //右侧讨论消息panel滚动到最下方
         ScrollToBottom: function () {
            //------滚动条，滚动到最后------
            var div = this.$refs['talkPanel'].$refs['wrap'];
            this.$nextTick(() => {
               div.scrollTop = div.scrollHeight;
            });
            //-----------------
         },

         infiniteHandler($state) {
            var self = this;
            this.$http.get('live/MeetRtc/GetConferenceMsg?datetime=' + self.datetime + '&id=' + self.conferenceId, { emulateJson: true }).then(function (res) {

               if (res.data.Count > 0) {
                  res.data.Content.forEach(function (item) {
                     self.conferenceMsgs.unshift(item);
                  });
                  $state.loaded();
                  self.datetime = res.data.Content[res.data.Count - 1].CreateDate;
               } else {
                  //没有更多的数据了
                  $state.complete();
               }
            },
               function () {
                  console.log('请求失败处理');
               });
         },

         //修改平铺/主持人模式
         resharpElement: function () {
           if(!this.screenModel) {
               if (this.isFocused) {
                   this.resharpElementOverlay();
                   this.resharpMessage = '演讲者模式';
                } else {
                   this.resharpElementFocus();
                   this.resharpMessage = '平铺模式';
                }
            }
         },

         //平铺模式
         resharpElementOverlay: function () {
            if (this.screenModel) {
               //全屏模式下，视频面板只有一列
               var wh = GetFocusedWidthHeight();
                  $.each($("#videos-container").children("div"), function (index, element) {
                     element.style.width = wh.width + 'px';
                     element.style.height = wh.height + 'px';
                     $(element.querySelector("video")).height("100%");
                  });
            } else {
               this.isFocused = false;
               if (this.showLeft && this.showRight) {
                  var count = $("#videos-container").children("div").length;
                  var width = $("#videos-container").width() / count - 20;
                  var height = width * 3 / 4 + 6;

                  $.each($("#videos-container").children("div"), function (index, element) {
                     element.style.width = width + 'px';
                     element.style.height = height + 'px';
                     $(element.querySelector("video")).height("100%");
                  });
               } else {
                  var wh = GetOverLayedWidthHeight();
                  $.each($("#videos-container").children("div"), function (index, element) {
                     element.style.width = wh.width + 'px';
                     element.style.height = wh.height + 'px';
                     $(element.querySelector("video")).height("100%");
                  });
               }
            }
         },



         //主持人模式
         resharpElementFocus: function () {
            this.isFocused = true;
            var whFocused = GetFocusedWidthHeight();
            var whDown = GetFocusedWidthHeightDown();

            var focusedElement = document.getElementById("videos-container").firstChild;

            //如果左右两侧全部收起来，那么就采用左右布局
            if (this.showLeft && this.showRight) {
               var lHeight = $(".vm-con").height();
               var lWidth = $(".vm-con").width();
               var lHeight_sub = lHeight / 3 - 15;

               //根据lHehght_sub 计算 每个子元素的宽度，

               var lWidth_sub = lHeight_sub * 4 / 3 - 10;

               var lWidth_main = lWidth - lWidth_sub - 26;


               $(focusedElement).width(lWidth_main);
               $(focusedElement).height(lHeight - 17);


               //动画有延迟
               setTimeout(function () {
                  if ($(focusedElement.firstChild).height() > (lHeight - 17)) {
                     //设置video的高度
                     $(focusedElement.querySelector("video")).height(lHeight - 19);
                  }

                  $.each($("#videos-container").children("div"), function (index, element) {
                     if (index !== 0) {
                        element.style.width = lWidth_sub + 'px';
                        element.style.height = lHeight_sub + 'px';
                        $(element.querySelector("video")).height("100%");
                     }
                  });
               }, 500);



            } else {

               $(focusedElement).width(whFocused.width);
               $(focusedElement).height(whFocused.height);
               $(focusedElement.querySelector("video")).height("100%");
               $.each($("#videos-container").children("div"), function (index, element) {
                  if (index !== 0) {
                     element.style.width = whDown.width + 'px';
                     element.style.height = whDown.height + 'px';
                     $(element.querySelector("video")).height("100%");
                  }
               });
            }



         },

         //修改视频源
         ChangeVideoSource: function (command) {
            //挂断
            if (command === "none") {
               if (this.isOnLive) {
                  unpublishOwnFeed();
                  this.isOnLive = false;
                  this.applying = false;
                  this.applyingResult = false;
                  this.applyText = "申请发言";
                  return;
               }
            }
            //摄像头
            if (command === "camera") {
               this.ShowCamera();
            }
            //桌面
            if (command === "desktop") {
               this.ShowDesktop();
            }
         },

         //打开或新建协同研讨
         OpenOrCreateDiscussByGroup: function (cb) {
            var _this = this;

            if (_this.discussId === "") {
               //创建
               var addUserIds = _this.memberids;
               var beginTime, endTime;
               beginTime = new Date().Format("yyyy-MM-dd hh:mm:ss");
               endTime = "2119-9-9 19:59:59";
               $.ajax({
                  type: 'Post',
                  url: '/PMC/Discuss/AddByGroup',
                  data: {
                     groupId: _this.conferenceId,
                     sourceType: 0,
                     discuss: {
                        AddUserIds: addUserIds,
                        Creator: "",//暂时没传，好像没用到
                        EndTime: endTime,
                        PostTime: beginTime,
                        Summary: '@ViewBag.Title' + '-视频会议的协同研讨',
                        Title: '@ViewBag.Title' + '视频会议的协同研讨',
                     }
                  },
                  dataType: "json",
                  success: function (result) {
                     if (result.Code == 200 && result.Data) {

                        _this.$message('创建成功');
                        _this.discussId = result.Other;
                        _this.CreateConferenceDiscuss(cb);
                     } else {
                        _this.$message(result.ErrorMessage);
                     }
                  },
                  error: function () {
                     _this.$message("请求失败");

                  }
               });
            } else {
               //1.判断是否已经被删除，
               //  如果已经被删除，则重新创建，然后打开，同时修改本地数据库的对应的        discussId
               //  如果没有被删除，则2.判断是否有新成员，
               //          如果没有新成员，直接打开就
               //          如果有新成员/删除的成员，则调用修改的接口，然后再打开

               _this.$http.get('/DiscussWebAPI/api/discuss/GetDiscussInfoStatus?disucssId=' + _this.discussId,
                  { emulateJson: true, }).then(
                     result => {
                        if (result.data.Success) {
                           if (result.data.Content) {
                              //没有删除,
                              _this.$http.get('/DiscussWebAPI/api/discuss/GetDiscussParticipantInfos?did=' + _this.discussId, { emulateJson: true, }).then(
                                 result => {
                                    if (result.data.Success) {
                                       //计算得出新增的用户和删除的用户
                                       var finalMemberIds = [];
                                       $.each(result.data.Content, function (index, value) {
                                          finalMemberIds.push(value.UserId || item.id);
                                       });
                                       var modify = _this.arrayCompare(finalMemberIds, _this.memberids);
                                       if (modify[0].length !== 0 || modify[1].length !== 0) {

                                          $.ajax({
                                             type: "post",
                                             url: '/Discuss/discussadd/ModifyDiscuss',
                                             data: {
                                                disId: _this.discussId,
                                                addUserIds: modify[1],
                                                reduceUserIds: modify[0],
                                                beginTime: new Date().Format("yyyy-MM-dd hh:mm:ss"),
                                                endTime: "2119-9-9 19:59:59",
                                             },
                                             dataType: "json",
                                             success: function (result) {

                                                if (result.Code == 200 && result.Data.Data) {
                                                   //修改成功
                                                   var openUrl = "/discuss/discuss/DiscussJump?did=" + _this.discussId + "&from=group";

                                                    cb && cb(openUrl);
                                                } else {
                                                   _this.$message.error('ModifyDiscuss失败！');
                                                   console.log(result.data.Error);
                                                   _this.discussId = "";
                                                }
                                                _this.btnDisable = false;
                                             },
                                             error: function () {
                                                _this.btnDisable = false;
                                             }
                                          });
                                       } else {
                                          var openUrl = "/discuss/discuss/DiscussJump?did=" + _this.discussId + "&from=group";

                                           cb && cb(openUrl);
                                          _this.btnDisable = false;
                                       }

                                    } else {
                                       console.log(result.data.Error);
                                    }
                                 });
                           }
                           else {
                              //已经删除了
                              //重新创建，重新打开
                              _this.discussId = "";
                              _this.OpenOrCreateDiscussByGroup(cb);
                           }
                        }
                        else {
                           console.log(result.data.Error);
                        }
                     });
            }
         },

         //创建完协同研讨后，在自己的数据库中保存一份对应的会议和协同研讨的数据
         CreateConferenceDiscuss: function (cb) {
            var self = this;
            var formData = new FormData(); //FormData构造器接收的是一个form的DOM对象
            formData.append('id', this.conferenceId);
            formData.append('discussid', this.discussId);
             this.$http.post('live/MeetRtc/CreateConferenceDiscuss', formData, { emulateJson: true }).then(
               result => {
                  if (result.data.Success) {
                     openUrl = "/discuss/discuss/DiscussJump?did=" + self.discussId + "&from=";

                      this.btnDisable = false;
                      cb && cb(openUrl);
                  } else {
                     this.$message.error('CreateConferenceDiscuss失败！');
                     self.discussId = "";
                     this.btnDisable = false;
                  }
               });
         },


         OpenOrCreateDiscuss: function () {
            if (this.btnDisable) {
               return;
            }
            this.btnDisable = true;
             this.OpenOrCreateDiscussByGroup(function (openUrl) {
                 window.open(openUrl, '_blank');
             });
         },

          OpenOrCreateDiscussInIframe: function () {

              this.OpenOrCreateDiscussByGroup(function (openUrl) {
                  document.getElementById("DiscussIframe").src = 'https://oaokcs.cnki.net' + openUrl;
              });
          },


      },



      watch: {
         showRight(val, oldVal) {
            if (this.isFocused) {
               setTimeout(this.resharpElementFocus, 400);
            }
            else {
               setTimeout(this.resharpElementOverlay, 400);
            }
         },

         showLeft(val, oldVal) {

            if (this.isFocused) {
               setTimeout(this.resharpElementFocus, 400);
            }
            else {
               setTimeout(this.resharpElementOverlay, 400);
            }
         },

         screenModel(val, oldVal) {

            setTimeout(this.resharpElementOverlay, 400);

             if (val) {
                 this.OpenOrCreateDiscussInIframe();
             } else {
                 document.getElementById("DiscussIframe").src = "";
             }

         },
         

         //摄像头分辨率
         value_reso(val, oldVal) {
            if (val == "0") {
               this.value_profile = '1080p';
            }
            else if (val == "1") {
               this.value_profile = '720p';
            } else if (val == "2") {
               this.value_profile = '480p';
            } else if (val == "3") {
               this.value_profile = '360p';
            } else if (val == "4") {
               this.value_profile = '240p';
            } else if (val == "5") {
               this.value_profile = '180p';
            } else if (val == "6") {
               this.value_profile = '120p';
            }
         },

         isOnLive(val, oldVal) {
            if (val) {
               this.applying = false;
               this.applyingResult = true;
               this.applyText = "正在发言";
            } else {
               this.applying = false;
               this.applyingResult = false;
               this.applyText = "申请发言";
            }
         }

      },

   });


</script>